var os = require('os');
var admin = require('pomelo-admin');
var utils = require('./utils');
var Constants = require('./constants');
var pathUtil = require('./pathUtil');
var starter = require('../master/starter');
var logger = require('pomelo-logger').getLogger('pomelo', __filename);
var pro = module.exports;

/**
 * Load admin modules
 * 加载，生成module对象
 * 遍历app._modules_中存放的所有module，然后分别调用其构造函数创建对象
 * 并通过consoleService.register（）注册这个module
 */
pro.loadModules = function(self, consoleService) {
  // load app register modules
  var _modules = self.app.get(Constants.KEYWORDS.MODULE);

  if(!_modules) {
    return;
  }

  var modules = [];
  for(var m in _modules){
    modules.push(_modules[m]);
  }
  
  var record, moduleId, module;
  for(var i=0, l=modules.length; i<l; i++) {
    record = modules[i];
    if(typeof record.module === 'function') {
      //调用构造函数,创建module对象
      module = record.module(record.opts, consoleService);
    } else {
      module = record.module;
    }

    moduleId = record.moduleId || module.moduleId;

    if(!moduleId) {
      logger.warn('ignore an unknown module.');
      continue;
    }

    //将module注册到consoleServer上
    consoleService.register(moduleId, module);
    //将该模块存入master的modules数组中
    self.modules.push(module);
  }
};


/**
 * module的启动
 * 对modules中的各个模块调用start函数进行启动
 * @param modules
 * @param cb
 */
pro.startModules = function(modules, cb) {
  // invoke the start lifecycle method of modules

  if(!modules) {
    return;
  }
  startModule(null, modules, 0, cb);
};

/**
 * Append the default system admin modules
 * 注册默认模块：并存放于app._modules_对象
 * 1）注册masterwatcher模块或者monitorwatcher模块
 * 2) 注册watchServer模块
 * 3）注册console模块
 * 4) 如果开启了systemMonitor,那么还要注册pomelo-admin的剩余模块。
 *    默认情况下，closeWatcher是开启的，systemMonitor是关闭的，所以
 *    只注册前三个模块
 */
pro.registerDefaultModules = function(isMaster, app, closeWatcher) {
  if(!closeWatcher) {
    if(isMaster) {
      //master服务器注册masterwatcher模块
      app.registerAdmin(require('../modules/masterwatcher'), {app: app});
    } else {
      //其他服务器注册monitorwatcher模块
      app.registerAdmin(require('../modules/monitorwatcher'), {app: app});
    }
  }

  //注册watchServer模块
  app.registerAdmin(admin.modules.watchServer,{app:app});
  //注册console模块
  app.registerAdmin(require('../modules/console'), {app: app, starter: starter});

  //如果开启了systemMonitor,再注册pomelo-admin的四个模块，用于pomelo-cli或者pomelo-web进行服务器监控管理
  if(app.enabled('systemMonitor')) {
    if(os.platform() !== Constants.PLATFORM.WIN) {
      app.registerAdmin(admin.modules.systemInfo);
      app.registerAdmin(admin.modules.nodeInfo);
    }
    app.registerAdmin(admin.modules.monitorLog, {path: pathUtil.getLogPath(app.getBase())});
    app.registerAdmin(admin.modules.scripts, {app:app, path: pathUtil.getScriptPath(app.getBase())});
    //非windows环境下，还会注册pomelo-admin的profiler模块
    if(os.platform() !== Constants.PLATFORM.WIN) {
      app.registerAdmin(admin.modules.profiler);
    }
  }
};

/**
 * 递归执行modules中的start函数，进行模块的启动
 * @param err
 * @param modules
 * @param index
 * @param cb
 */
var startModule = function(err, modules, index, cb) {
  if(err || index >= modules.length) {
    utils.invokeCallback(cb, err);
    return;
  }

  var module = modules[index];
  if(module && typeof module.start === 'function') {
    module.start(function(err) {
      startModule(err, modules, index + 1, cb);
    });
  } else {
    startModule(err, modules, index + 1, cb);
  }
};
