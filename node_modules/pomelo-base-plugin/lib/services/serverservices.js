/**
 *----------------------------------------------
 * Author: lenon
 * Create Time: 2016/3/2 11:00
 * Desc: (负责服务器进程在生命周期各个阶段的功能状态)
 * Changed list:
 *        Change author:(若修改请指明修改者)
 *        Change desc:(修改描叙)
 *        Change time:(修改的时间)
 *----------------------------------------------
 **/
var path = require('path');
var Loader = require('pomelo-loader');
var fs = require('fs');
var sysConst = require('./../const/sysConst');
var Timer = require('./../services/timer');
var utils = require('./../utils/utils');
var logger = require('pomelo-logger').getLogger('pomelo', __filename);

var serverservices = function(app, opts) {
    opts = opts || {};
    this.app = app;
    this.timer = null;
    this.interval = opts.interval || sysConst.DEFAULT_SETTINGS.SERVICES_UPDATE_INTERVAL;
    this.servicesDirName = sysConst.DEFAULT_SETTINGS.SERVICES_DIR_NAME;

    this.services = [];
};

module.exports = serverservices;

/**
 * 服务器开启前钩子函数
 * @param next
 */
serverservices.prototype.beforeStartup = function(next){
    // 创建定时器，用来执行Update.
    this.timer = new Timer({
        serverservices : this,
        interval : this.interval
    });

    // 加载服务;
    loadServices(this, this.app.getServerType());
    loadServices(this, 'all');
    utils.invokeCallback(next);
};

/**
 * 按服务器类型，来区分目录加载服务
 * @param self
 * @param serverType
 */
var loadServices = function(self, serverType) {
    var dir = path.join(self.app.getBase(), 'app', self.servicesDirName, serverType);
    if(dir && fs.existsSync(dir)) {
        var services = Loader.load(dir, self.app);
        if (!services){
            return;
        }
        for(var key in services){
            if (!services.hasOwnProperty(key)) continue;
            var service = services[key];
            service.serviceName = key.toString();
            self[key] = service;
            self.services.push(service);
        }
    }
};

/**
 * 该进程启动完钩子函数
 * @param next
 */
serverservices.prototype.afterStartup = function(next){
    var self = this;
    this.exeFunction(sysConst.SERVICES_BUILT_IN_FUNCTION.STARTUP, function() {
        utils.invokeCallback(next);
        // 定时器开始运行;
        self.timer.run();
    });
};

/**
 * 进程关闭前钩子函数
 * @param next
 */
serverservices.prototype.beforeShutdown = function(next){
    // 定时器关闭;
    this.timer.close();
    this.exeFunction(sysConst.SERVICES_BUILT_IN_FUNCTION.SHUTDOWN, next);
};

/**
 * 所有进程成功运行
 */
serverservices.prototype.afterStartAll = function(){
    if (this.app.isMaster()){
        var appName = this.app.get('name');
        if (!appName) appName = '';
        var appVer = this.app.get('version');
        if (!appVer) appVer = '';
        logger.info('%s has started! current version:%s', appName, appVer);
    }
};

/**
 * 进程内所有服务执行指定函数
 * @param method
 */
serverservices.prototype.exeFunction = function(method){
    var lastArgs = arguments[arguments.length-1];
    if (!!lastArgs && typeof lastArgs === 'function'){
        utils.parallelOpt(this.services, method, Array.prototype.slice.call(arguments, 1));
    } else {
        utils.opt(this.services, method, Array.prototype.slice.call(arguments, 1));
    }
};